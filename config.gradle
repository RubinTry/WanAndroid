apply plugin: 'kotlin-android'
<<<<<<< HEAD
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-noarg'
apply plugin: 'kotlin-allopen'


android{
    viewBinding  {
        enabled = true
    }


    defaultConfig {
        multiDexEnabled true
        ndk {
            abiFilters 'armeabi-v7a'
        }
=======
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android'
apply plugin: 'com.jakewharton.butterknife'

android{
    dataBinding {
        enabled = true
    }
    defaultConfig {
        multiDexEnabled true
>>>>>>> b86d385c9aeacc8d38ae771c802539495ef6cdab
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions{
        jvmTarget = "1.8"
    }
<<<<<<< HEAD

    sourceSets{
        main {

            jniLibs.srcDirs = ['libs']


            //为所有module指定对应的AndroidManifest.xml文件，主module和CommonLib除外，
            // app（主）模块必须引用默认生成的AndroidManifest.xml文件
            def identityPathName = identityPath.name
            if(identityPathName != "app" && identityPathName != "lib-common" && identityPathName != "lib-res"){
                if(runAsApplication.toBoolean().booleanValue()){
                    manifest.srcFile 'src/main/AndroidManifest.xml'
                }else{
                    //确保libManifest目录存在
                    def dirPath = 'src/main/manifest'
                    def file = file(dirPath)
                    if(file.isDirectory() && !file.exists()){
                        file.mkdir()
                    }
                    def path = dirPath + '/AndroidManifest.xml'
                    println '路径为: ' + identityPathName + '------'+ path
                    manifest.srcFile  path
                }
            }else{
                manifest.srcFile 'src/main/AndroidManifest.xml'
            }

        }
    }

}



=======
}


>>>>>>> b86d385c9aeacc8d38ae771c802539495ef6cdab
dependencies{
    def activity_version = "1.1.0"
    // Kotlin
    implementation "androidx.activity:activity-ktx:$activity_version"
    implementation "androidx.fragment:fragment-ktx:$activity_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
<<<<<<< HEAD
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"

}

task allDeps(type: DependencyReportTask) {
}
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
=======
    annotationProcessor  'cn.rubintry:gorouter-compiler:1.0.5'
    kapt  'cn.rubintry:gorouter-compiler:1.0.5'
>>>>>>> b86d385c9aeacc8d38ae771c802539495ef6cdab
}